// This test ensures that the macro expansion is generated and working as expected.
go-to: "file://" + |DOC_PATH| + "/src/macro_expansion/lib.rs.html"

define-function: (
    "check-expansion",
    [line, original_content],
    block {
        assert-text: ("a[id='" + |line| + "'] + .expansion .original", |original_content|)
        // The "original" content should be expanded.
        assert-css: ("a[id='" + |line| + "'] + .expansion .original", {"display": "inline"})
        // The expanded macro should be hidden.
        assert-css: ("a[id='" + |line| + "'] + .expansion .expanded", {"display": "none"})

        // We "expand" the macro.
        click: "a[id='" + |line| + "'] + .expansion input[type=checkbox]"
        // The "original" content is hidden.
        assert-css: ("a[id='" + |line| + "'] + .expansion .original", {"display": "none"})
        // The expanded macro is visible.
        assert-css: ("a[id='" + |line| + "'] + .expansion .expanded", {"display": "inline"})

        // We collapse the macro.
        click: "a[id='" + |line| + "'] + .expansion input[type=checkbox]"
        // The "original" content is expanded.
        assert-css: ("a[id='" + |line| + "'] + .expansion .original", {"display": "inline"})
        // The expanded macro is hidden.
        assert-css: ("a[id='" + |line| + "'] + .expansion .expanded", {"display": "none"})
    }
)

// First we check the derive macro expansion at line 33.
call-function: ("check-expansion", {"line": 33, "original_content": "Debug"})
// Then we check the `bar` macro expansion at line 41.
call-function: ("check-expansion", {"line": 41, "original_content": "bar!(y)"})
// Then we check the `println` macro expansion at line 42-44.
call-function: ("check-expansion", {"line": 42, "original_content": 'println!("
43    {y}
44    ")'})

// Then finally we check when there are two macro calls on a same line.
assert-count: ("#expand-50 ~ .original", 2)
assert-count: ("#expand-50 ~ .expanded", 2)

store-value: (repeat_o, '/following-sibling::*[@class="original"]')
store-value: (repeat_e, '/following-sibling::*[@class="expanded"]')
assert-text: ('//*[@id="expand-50"]' + |repeat_o|, "stringify!(foo)")
assert-text: ('//*[@id="expand-50"]' + |repeat_o| + |repeat_o|, "stringify!(bar)")
assert-text: ('//*[@id="expand-50"]' + |repeat_e|, '"foo"')
assert-text: ('//*[@id="expand-50"]' + |repeat_e| + |repeat_e|, '"bar"')

// The "original" content should be expanded.
assert-css: ('//*[@id="expand-50"]' + |repeat_o|, {"display": "inline"})
assert-css: ('//*[@id="expand-50"]' + |repeat_o| + |repeat_o|, {"display": "inline"})
// The expanded macro should be hidden.
assert-css: ('//*[@id="expand-50"]' + |repeat_e|, {"display": "none"})
assert-css: ('//*[@id="expand-50"]' + |repeat_e| + |repeat_e|, {"display": "none"})

// We "expand" the macro (because the line starts with a string, the label is not at the "top
// level" of the `<code>`, so we need to use a different selector).
click: "#expand-50"
// The "original" content is hidden.
assert-css: ('//*[@id="expand-50"]' + |repeat_o|, {"display": "none"})
assert-css: ('//*[@id="expand-50"]' + |repeat_o| + |repeat_o|, {"display": "none"})
// The expanded macro is visible.
assert-css: ('//*[@id="expand-50"]' + |repeat_e|, {"display": "inline"})
assert-css: ('//*[@id="expand-50"]' + |repeat_e| + |repeat_e|, {"display": "inline"})

// We collapse the macro.
click: "#expand-50"
// The "original" content is expanded.
assert-css: ('//*[@id="expand-50"]' + |repeat_o|, {"display": "inline"})
assert-css: ('//*[@id="expand-50"]' + |repeat_o| + |repeat_o|, {"display": "inline"})
// The expanded macro is hidden.
assert-css: ('//*[@id="expand-50"]' + |repeat_e|, {"display": "none"})
assert-css: ('//*[@id="expand-50"]' + |repeat_e| + |repeat_e|, {"display": "none"})

// Checking the line 46 `println` which needs to be handled differently because the line number is
// inside a "comment" span.
assert-text: ("#expand-46 ~ .original", 'println!("
47    {y}
48    ")')
// The "original" content should be expanded.
assert-css: ("#expand-46 ~ .original", {"display": "inline"})
// The expanded macro should be hidden.
assert-css: ("#expand-46 ~ .expanded", {"display": "none"})

// We "expand" the macro.
click: "#expand-46"
// The "original" content is hidden.
assert-css: ("#expand-46 ~ .original", {"display": "none"})
// The expanded macro is visible.
assert-css: ("#expand-46 ~ .expanded", {"display": "inline"})

// We collapse the macro.
click: "#expand-46"
// The "original" content is expanded.
assert-css: ("#expand-46 ~ .original", {"display": "inline"})
// The expanded macro is hidden.
assert-css: ("#expand-46 ~ .expanded", {"display": "none"})

// Ensure that the toggles are focusable and can be interacted with keyboard.
focus: "//a[@id='27']"
press-key: "Tab"
assert: "#expand-27:focus"
assert-css: ("#expand-27 ~ .expanded", {"display": "none"})
assert-css: ("#expand-27 ~ .original", {"display": "inline"})
// We now expand the macro.
press-key: "Space"
assert-css: ("#expand-27 ~ .expanded", {"display": "inline"})
assert-css: ("#expand-27 ~ .original", {"display": "none"})
// We collapse the macro.
press-key: "Space"
assert-css: ("#expand-27 ~ .expanded", {"display": "none"})
assert-css: ("#expand-27 ~ .original", {"display": "inline"})
